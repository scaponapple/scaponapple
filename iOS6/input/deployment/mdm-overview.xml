<Group id="mobile_device_management_software"> 
<title>Mobile Device Management Software</title>  
<description> Third-party MDM products, as well as Apple’s own OS X Server, can
automate the deployment of configuration profiles and carry out the operational
management of devices. Configuration profiles can also be provided via secure
web-based services. Configuration profiles can also be created using Apple’s
iPhone Configuration Utility ("iPCU"), but it does not provide mechanisms for
automated deployment or reporting. iPCU provides a convenient means of
surveying the settings which can be deployed to devices, although there is no
guarantee that a particular MDM product will support all settings.
</description>
 
<Group id="select_mobile_device_management_mdm_software"> 
<title>Select Mobile Device Management (MDM) Software</title>          
<description> Select an MDM product which uses Apple’s MDM API, unless
enterprise management of the devices is not needed. </description> 
<rationale> Apple’s MDM API provides the supported mechanism for enterprise
device management, and various 3rd party vendors have built products upon it.
For more information, see <b>http://www.apple.com/iphone/business/it-center/deployment-mdm.html</b>.
</rationale> 
</Group>

<Group id="understand_capabilities_of_mdm_software"> 
<title>Understand Capabilities of MDM Software</title>          
<description> Mobile device management software may also include features that
are not part of the supported Apple MDM API: 
<ul>
<li>"Jailbreak detection” can
determine if a user has chosen to jailbreak his or her device, which is a
useful feature for enterprises who monitor compliance. However, it does not
provide high assurance that a device has not been maliciously jailbroken by a
sophisticated attacker. The situation is analogous to “root detection” on
another mobile platform. It is also analogous to the historical and difficult
problem of rootkit detection on desktop or server operating systems. In all
these cases, the operating system itself becomes compromised. Since it alone
operates at the most privileged levels, there are limits to the extent to which
any add-on software can "ask a liar if he is lying."
<br />
<br />
The system’s cryptographically-verified boot process, runtime enforcement of
code signatures, app sandboxing mechanism, controlled software distribution
model via "app stores", and rapid software update capability very strongly
address the problem of jailbreak-based attacks by themselves. Using add-on
software to query for signs of jailbreak may provide an additional layer of
defense. </li>
<br />
<br />
<li>"Secure containers" can provide data-at-rest protection and data-in-transit
protection. These are typically software libraries included by 3rd party apps,
which then make use of their functionality instead of that provided by the
system’s software libraries. These "containers" (which are really just apps)
can be useful if the system’s capable, built-in mechanisms which already
provide these features do not meet particular requirements. Note, however, that
they cannot protect their contents against privileged code running on the
device, such as would result from a sophisticated, malicious jailbreak attack
during system operation.
<br />
<br />
They should also <i>not be confused</i> with the Sandboxing feature of
the iOS kernel as described in [Blazakis]. Rather, the Sandboxing feature
strongly addresses the problem of malicious or co-opted apps trying to perform
undesirable activities on the system (such as elevating their privileges) in
the first place. Sandboxing constitutes a significant obstacle to attackers,
but it does not allow apps to (rather inconceivably) protect themselves if the
underlying operating system is compromised. App sandboxing may serve as a means
of jailbreak detection as discussed above, in that an app which can access
beyond its Sandbox may infer that it is running on a compromised device.
</li>
</ul>
</description>
</Group>
</Group>
